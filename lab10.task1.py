# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'uibd.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3
class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(894, 427)
        self.groupBox = QtWidgets.QGroupBox(Dialog)
        self.groupBox.setGeometry(QtCore.QRect(10, 150, 871, 91))
        self.groupBox.setObjectName("groupBox")
        self.text_edit_material_name = QtWidgets.QLineEdit(self.groupBox)
        self.text_edit_material_name.setGeometry(QtCore.QRect(20, 30, 121, 31))
        self.text_edit_material_name.setObjectName("text_edit_material_name")
        self.text_edit_material_area = QtWidgets.QLineEdit(self.groupBox)
        self.text_edit_material_area.setGeometry(QtCore.QRect(160, 30, 111, 31))
        self.text_edit_material_area.setObjectName("text_edit_material_area")
        self.text_edit_material_area_std = QtWidgets.QLineEdit(self.groupBox)
        self.text_edit_material_area_std.setGeometry(QtCore.QRect(290, 30, 111, 31))
        self.text_edit_material_area_std.setObjectName("text_edit_material_area_std")
        self.text_edit_material_porous = QtWidgets.QLineEdit(self.groupBox)
        self.text_edit_material_porous.setGeometry(QtCore.QRect(420, 30, 111, 31))
        self.text_edit_material_porous.setObjectName("text_edit_material_porous")
        self.text_edit_material_porous_std = QtWidgets.QLineEdit(self.groupBox)
        self.text_edit_material_porous_std.setGeometry(QtCore.QRect(550, 30, 101, 31))
        self.text_edit_material_porous_std.setObjectName("text_edit_material_porous_std")
        self.btnAddRow = QtWidgets.QPushButton(self.groupBox)
        self.btnAddRow.clicked.connect(self.push_button_add_click)
        self.btnAddRow.setGeometry(QtCore.QRect(700, 30, 141, 41))
        self.btnAddRow.setObjectName("btnAddRow")
        self.groupBox_2 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_2.setGeometry(QtCore.QRect(10, 260, 871, 81))
        self.groupBox_2.setObjectName("groupBox_2")
        self.text_edit_material_id = QtWidgets.QLineEdit(self.groupBox_2)
        self.text_edit_material_id.setGeometry(QtCore.QRect(10, 20, 151, 41))
        self.text_edit_material_id.setObjectName("text_edit_material_id")
        self.btnDeleteRow = QtWidgets.QPushButton(self.groupBox_2)
        self.btnDeleteRow.setGeometry(QtCore.QRect(700, 20, 141, 41))
        self.btnDeleteRow.setObjectName("btnDeleteRow")
        self.btnDeleteRow.clicked.connect(self.push_button_delete_click)
        self.btnOK = QtWidgets.QPushButton(Dialog)
        self.btnOK.setGeometry(QtCore.QRect(770, 380, 101, 31))
        self.btnOK.setObjectName("btnOK")
        self.tableWidget = QtWidgets.QTableWidget(Dialog)
        self.tableWidget.setGeometry(QtCore.QRect(10, 10, 981, 131))
        self.tableWidget.setColumnCount(6)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        self.tableWidget.horizontalHeader().setVisible(True)
        self.tableWidget.verticalHeader().setSortIndicatorShown(False)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        print(2)
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.groupBox.setTitle(_translate("Dialog", "Добавить запись"))
        self.text_edit_material_name.setPlaceholderText(_translate("Dialog", "наименование материала"))
        self.text_edit_material_area.setPlaceholderText(_translate("Dialog", "площадь поры"))
        self.text_edit_material_area_std.setPlaceholderText(_translate("Dialog", "откл. от площ."))
        self.text_edit_material_porous.setPlaceholderText(_translate("Dialog", "пористость"))
        self.text_edit_material_porous_std.setPlaceholderText(_translate("Dialog", "откл. от пористости"))
        self.btnAddRow.setText(_translate("Dialog", "Добавить"))
        self.groupBox_2.setTitle(_translate("Dialog", "Удалить запись"))
        self.text_edit_material_id.setPlaceholderText(_translate("Dialog", "номер записи"))
        self.btnDeleteRow.setText(_translate("Dialog", "Удалить"))
        self.btnOK.setText(_translate("Dialog", "ОК"))
        self.tableWidget.setSortingEnabled(False)
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Dialog", "ID"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Dialog", "Наименование"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Dialog", "Площадь поры"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("Dialog", "Откл. от площади"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("Dialog", "Пористость"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("Dialog", "Откл. от пористости"))
        self.load_materials()

    def push_button_add_click(self):
        print(1)
        material_name = self.text_edit_material_name.text()
        print(material_name)
        material_area = self.text_edit_material_area.text()
        material_area_std = self.text_edit_material_area_std.text()
        material_porous = self.text_edit_material_porous.text()
        material_porous_std = self.text_edit_material_porous_std.text()
        data = [material_name, material_area, material_area_std, material_porous, material_porous_std]
        print(data)
        flag = [True if (m is not None and m != '') else False for m in data]
        if flag:
            try:
                material_area = float(material_area)
                material_area_std = float(material_area_std)
                material_porous = float(material_porous)
                material_porous_std = float(material_porous_std)
                # connect = sqlite3.connect(self.db_name) # fucking_bd
                connect = sqlite3.connect("fucking_bd")  # fucking_bd
                crsr = connect.cursor()
                crsr.execute("""INSERT INTO Materials(NAME,
            PORE_AREA_MEAN, PORE_AREA_STD, POROUS_MEAN, POROUS_STD)
            VALUES (?,?,?,?,?)""",
                             (material_name, material_area, material_area_std, material_porous, material_porous_std))
                connect.commit()
                connect.close()
                self.load_materials()
                self.fill_table()
            except Exception as e:
                (print(e))

    def push_button_delete_click(self):
        print(3)
        index = self.text_edit_material_id.text()
        try:
            index = int(index) - 1
            if 0 <= index <= len(self.materials) - 1:
                connect = sqlite3.connect("fucking_bd")
                crsr = connect.cursor()
                row = self.materials.pop(index)
                id = row[0]
                crsr.execute('DELETE FROM Materials WHERE ID=?', (id,))
                connect.commit()
                connect.close()
                self.load_materials()
                self.fill_table()
        except Exception as e:
            print(e)

    def fill_table(self):
        conn = sqlite3.connect("fucking_bd")
        cur = conn.cursor()

        results = cur.execute("SELECT * FROM Materials;").fetchall()
        conn.close()

        rows = len(results)
        columns = len(results[0])
        self.tableWidget.setRowCount(rows)
        self.tableWidget.setColumnCount(columns)

        for i in range(rows):
            for j in range(columns):
                item = QtWidgets.QTableWidgetItem("{}".format(results[i][j]))
                # item.setTextAlignment(Qt.AlignHCenter)
                self.tableWidget.setItem(i, j, item)

    def load_materials(self):
        print('load_materials')
        conn = sqlite3.connect("fucking_bd")
        cur = conn.cursor()

        self.materials = cur.execute("SELECT * FROM Materials;").fetchall()
        conn.close()

        print(self.materials)

        self.fill_table()  # Call fill_table to populate tableWidget

    def set_material_values(self):
        conn = sqlite3.connect("fucking_bd")
        cur = conn.cursor()

        self.materials = cur.execute("SELECT * FROM Materials;").fetchall()
        conn.close()

        currentMaterial = self.cmbxMaterialName.text()
        # for material in self.materials:
        #     if material[1] == currentMaterial:
        #         self.label_pore_area.setText(str(material[2]))
        #         self.label_pore_area_std.setText(str(material[3]))
        #         self.label_porous.setText(str(material[5]))
        #         self.label_porous_std.setText(str(material[4]))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
